--tickAltitude(TickRate:0.1)

--initalize
if not altitudeInit then
    altitudeInit = true

    verticalThrustSolution = vec3(0,0,0)
end

-- only do calculations when ap is on
if ap.enabled then
    
    ap.currentPosition = vec3(construct.getWorldPosition())
    ap.currentAltitude = getAltitude(ap.currentPosition, ap.currentPlanet)
    ap.currentVelocity = construct.getWorldAbsoluteVelocity()
    ap.currentAcceleration = construct.getWorldAcceleration()
    ap.altitudePID:inject(ap.targetAltitude - ap.currentAltitude)
    ap.thrustUp = unit.getEngineThrust("thrustUp")
    ap.thrustDown = unit.getEngineThrust("thrustDown")
    ap.thrustRight = unit.getEngineThrust("thrustRight")
    ap.thrustLeft = unit.getEngineThrust("thrustLeft")
    ap.thrustForwards = unit.getEngineThrust("thrustForwards")
    ap.thrustBack = unit.getEngineThrust("thrustBack")
    ap.pitchSpeedFactor = math.max(ap.pitchSpeedFactor)
    ap.yawSpeedFactor = math.max(ap.yawSpeedFactor, 0.01)
    ap.rollSpeedFactor = math.max(ap.rollSpeedFactor, 0.01)
    ap.torqueFactor = math.max(ap.torqueFactor, 0.01)
    ap.brakeSpeedFactor = math.max(ap.brakeSpeedFactor, 0.01)
    ap.brakeFlatFactor = math.max(ap.brakeFlatFactor, 0.01)
    ap.autoRollFactor = math.max(ap.autoRollFactor, 0.01)
    ap.turnAssistFactor = math.max(ap.turnAssistFactor, 0.01)
    ap.forwardInput = system.getControlDeviceForwardInput()
    ap.yawInput = system.getControlDeviceYawInput()
    ap.leftRightInput = system.getControlDeviceLeftRightInput()
    
    -- figure out verticalThrustSolution
end


